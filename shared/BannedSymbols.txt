M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[]);Use WhenAll(...).AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan);Use WhenAll(...).AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32);Use WhenAll(...).AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken);Use WhenAll(...).AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken);Use WhenAll(...).AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[]);Use WhenAny(...).AwaitUncaptured().AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan);Use WhenAny(...).AwaitUncaptured().AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32);Use WhenAny(...).AwaitUncaptured().AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken);Use WhenAny(...).AwaitUncaptured().AwaitUncaptured() instead
M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken);Use WhenAny(...).AwaitUncaptured().AwaitUncaptured() instead
M:System.Threading.Thread.VolatileRead(System.Object@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.SByte@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.Byte@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.Int16@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.UInt16@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.Int32@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.UInt32@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.Int64@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.UInt64@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.Single@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.Double@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.IntPtr@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileRead(System.UIntPtr@);Use Volatile.Read instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr);Use Volatile.Write instead, this method is considered legacy
M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr);Use Volatile.Write instead, this method is considered legacy
P:System.DateTime.Now;Use System.TimeProvider.GetLocalNow() instead
P:System.DateTimeOffset.Now;Use System.TimeProvider.GetLocalNow() instead
M:System.Random.#ctor();Use overload with specified seed instead
M:System.Text.StringBuilder.Append(System.Object);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.SByte);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Byte);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Int16);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.UInt16);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Int32);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.UInt32);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Int64);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.UInt64);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Single);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Double);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Append(System.Decimal);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Object);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.SByte);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Byte);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Int16);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Int32);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Int64);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Single);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Double);Use AppendFormat(IFormatProvider,..) instead
M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal);Use AppendFormat(IFormatProvider,..) instead
M:System.Delegate.DynamicInvoke(System.Object[]);Use typed delegates instead
P:System.Collections.Concurrent.ConcurrentDictionary`2.Count;Use Interlocked counting instead, since this property is very slow
P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty;Use Interlocked counting instead, since this property is very slow
P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys;Use dictionary pair enumeration instead, since this property is very slow
P:System.Collections.Concurrent.ConcurrentDictionary`2.Values;Use dictionary pair enumeration instead, since this property is very slow
M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray();Use dictionary pair enumeration instead, since this method is very slow
M:Newtonsoft.Json.JsonSerializer.#ctor();Use JsonSerializer.CreateDefault() or JsonSerializer.Create(JsonSerializerSettings) instead
M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object);Use FromObject(Object, JSonSerializer) instead, since using implicit default serializer may lead to errors and creating serializer each time is slow
M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object);Use FromObject(Object, JSonSerializer) instead, since using implicit default serializer may lead to errors and creating serializer each time is slow
T:System.ComponentModel.Composition.ExportAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.ExportMetadataAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.ImportAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.ImportManyAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.ImportMetadataConstraintAttribut;Use types from System.Composition instead
T:System.ComponentModel.Composition.ImportingConstructorAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.MetadataAttributeAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.OnImportsSatisfiedAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.PartMetadataAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.PartNotDiscoverableAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.SharedAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.SharingBoundaryAttribute;Use types from System.Composition instead
T:System.ComponentModel.Composition.Convention.AttributedModelProvider;Use types from System.Composition instead
T:System.Threading.Timer;Use System.TimeProvider.CreateTimer instead
T:System.Timers.Timer;Use System.TimeProvider.CreateTimer instead
M:System.DateTimeOffset.#ctor(System.DateTime);Use DateTimeOffset constructor with a specified offset, checking the DateTime.Kind, since this constructor is very prone to timezone errors
M:System.DateTimeOffset.op_Implicit(System.DateTime);Use DateTimeOffset constructor with a specified offset, checking the DateTime.Kind, since this constructor is very prone to timezone errors
P:System.DateTimeOffset.DateTime;Prefer using DateTimeOffset directly or create instances of DateTime with TimeProvder.GetUtcDateTime/GetLocalDateTime, use this property only if TZ-specific calendar date is required
T:System.Threading.LazyInitializer;Use System.Lazy<> instead, LazyInitializer is NRT-unfriendly for old netstandard
F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Offline;Use Online revocation check instead, Offline uses only cached revocation information
M:System.Diagnostics.Debug.Assert(System.Boolean);Do not use Debug.Assert since it may not do what you're expecting;plain "if + throw" works better
M:System.Diagnostics.Debug.Assert(System.Boolean,System.String);Do not use Debug.Assert since it may not do what you're expecting;plain "if + throw" works better
M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String);Do not use Debug.Assert since it may not do what you're expecting;plain "if + throw" works better
M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[]);Do not use Debug.Assert since it may not do what you're expecting;plain "if + throw" works better
M:System.Diagnostics.Debug.Assert(System.Boolean,System.Diagnostics.Debug.AssertInterpolatedStringHandler);Do not use Debug.Assert since it may not do what you're expecting;plain "if + throw" works better
M:System.Diagnostics.Debug.Assert(System.Boolean,System.Diagnostics.Debug.AssertInterpolatedStringHandler,System.Diagnostics.Debug.AssertInterpolatedStringHandler);Do not use Debug.Assert since it may not do what you're expecting;plain "if + throw" works better
P:System.Web.HttpResponse.RedirectLocation;Use only Redirect methods, because the have additional security checks
P:System.Web.HttpResponseBase.RedirectLocation;Use only Redirect methods, because the have additional security checks
M:MongoDB.Driver.FilterDefinition`1.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.FilterDefinitionBuilder`1.ElemMatch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.FilterDefinitionBuilder`1.OfType``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.FilterDefinitionBuilder`1.OfType``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.FilterDefinitionBuilder`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IAggregateFluentExtensions.Match``1(MongoDB.Driver.IAggregateFluent{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Count``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Count``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.CountAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.CountAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.CountDocuments``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.CountDocuments``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.CountDocumentsAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.CountDocumentsAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.CountOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteMany``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteMany``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteMany``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteManyAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteManyAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteManyAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteOne``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteOne``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteOne``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteOneAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteOneAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DeleteOneAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DeleteOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Distinct``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.FieldDefinition{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Distinct``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Distinct``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.FieldDefinition{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Distinct``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.FieldDefinition{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctAsync``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.FieldDefinition{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctMany``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.FieldDefinition{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctMany``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctMany``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.FieldDefinition{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctMany``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctManyAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.FieldDefinition{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctManyAsync``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctManyAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.FieldDefinition{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.DistinctManyAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.DistinctOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Find``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOptions);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.Find``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOptions);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindSync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindSync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDelete``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDelete``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDelete``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDelete``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDeleteAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDeleteAsync``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDeleteAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndDeleteAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.FindOneAndDeleteOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplace``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplace``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplace``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplace``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplaceAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplaceAsync``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplaceAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.IClientSessionHandle,``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndReplaceAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.FindOneAndReplaceOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdate``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdate``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdate``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdate``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdateAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdateAsync``2(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdateAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``0},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.FindOneAndUpdateAsync``2(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.FindOneAndUpdateOptions{``0,``1},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOne``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.ReplaceOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOne``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOne``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.ReplaceOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOne``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOneAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.ReplaceOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOneAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOneAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.ReplaceOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.ReplaceOneAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateMany``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateMany``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateManyAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateManyAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateOne``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateOne``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateOneAsync``1(MongoDB.Driver.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.IMongoCollectionExtensions.UpdateOneAsync``1(MongoDB.Driver.IMongoCollection{``0},MongoDB.Driver.IClientSessionHandle,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},MongoDB.Driver.UpdateOptions,System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.PipelineDefinitionBuilder.Match``2(MongoDB.Driver.PipelineDefinition{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.PipelineStageDefinitionBuilder.Match``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.ProjectionDefinitionExtensions.ElemMatch``2(MongoDB.Driver.ProjectionDefinition{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.ProjectionDefinitionBuilder`1.ElemMatch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.UpdateDefinitionExtensions.PullFilter``2(MongoDB.Driver.UpdateDefinition{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.UpdateDefinitionBuilder`1.PullFilter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.AnyAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.CountAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.FirstAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.FirstOrDefaultAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.LongCountAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.SingleAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.SingleOrDefaultAsync``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken);Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:MongoDB.Driver.Linq.MongoQueryable.Where``1(MongoDB.Driver.Linq.IMongoQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}});Use specific expressions like Eq, etc. instead of expression-based filters since they are very slow
M:System.Threading.Tasks.TaskFactory.StartNew(System.Action); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0}); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew(System.Func{System.Object,System.Threading.Tasks.Task},System.Object); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, Task>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.Threading.CancellationToken); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, Task>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.Threading.Tasks.TaskCreationOptions); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, Task>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, ...>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, ...>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, ...>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler); Use Task.Run instead for better default behavior and to avoid potential issues with the TaskScheduler or prefer the non-banned overload StartNew(Func<object, ...>, object, CancellationToken, TaskCreationOptions, TaskScheduler)
M:System.Xml.XmlReader.Create(System.IO.Stream); Use XmlReader.Create overloads that include XmlReaderSettings, because defaults are not safe enough
M:System.Xml.XmlReader.Create(System.IO.TextReader); Use XmlReader.Create overloads that include XmlReaderSettings, because defaults are not safe enough
M:System.Xml.XmlReader.Create(System.String); Use XmlReader.Create overloads that include XmlReaderSettings, because defaults are not safe enough
M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String); Do not use XmlReader.Create overloads that provide custom base URIs, because foreign URIs may pose a security risk
M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String); Do not use XmlReader.Create overloads that provide custom base URIs, because foreign URIs may pose a security risk
M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext); Do not use XmlReader.Create overloads that provide custom parser contexts, because foreign URIs may pose a security risk
M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext); Do not use XmlReader.Create overloads that provide custom parser contexts, because foreign URIs may pose a security risk
